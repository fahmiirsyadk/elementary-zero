diff --git a/src/Backend/App.vala b/src/Backend/App.vala
index 4ec6f986..1d604ada 100644
--- a/src/Backend/App.vala
+++ b/src/Backend/App.vala
@@ -154,10 +154,17 @@ public class Slingshot.Backend.App : Object {
                         start_search (match as Synapse.SearchMatch, target);
                         return false;
                     } else {
-                        if (target == null)
-                            Backend.SynapseSearch.find_actions_for_match (match).get (0).execute_with_target (match);
-                        else
+                        if (target == null) {
+                            var actions = Backend.SynapseSearch.find_actions_for_match (match);
+                            if (actions.size > 0) {
+                                actions.get (0).execute_with_target (match);
+                            } else {
+                                // No actions available, execute match directly (e.g., file open for file search matches)
+                                match.execute (null);
+                            }
+                        } else {
                             match.execute_with_target (target);
+                        }
                     }
                     break;
             }
diff --git a/src/Backend/SynapseSearch.vala b/src/Backend/SynapseSearch.vala
index 7c462f62..6153c924 100644
--- a/src/Backend/SynapseSearch.vala
+++ b/src/Backend/SynapseSearch.vala
@@ -29,7 +29,8 @@ namespace Slingshot.Backend {
             typeof (Synapse.SystemManagementPlugin),
             typeof (Synapse.LinkPlugin),
             typeof (Synapse.AppcenterPlugin),
-            typeof (Synapse.FileBookmarkPlugin)
+            typeof (Synapse.FileBookmarkPlugin),
+            typeof (Synapse.FileSearchPlugin)
         };
 
         private static Synapse.DataSink? sink = null;
diff --git a/src/SlingshotView.vala b/src/SlingshotView.vala
index cf9bbe89..affacb65 100644
--- a/src/SlingshotView.vala
+++ b/src/SlingshotView.vala
@@ -350,6 +350,7 @@ public class Slingshot.SlingshotView : Gtk.Bin, UnityClient {
         if (modality != Modality.SEARCH_VIEW)
             set_modality (Modality.SEARCH_VIEW);
 
+        string query_text = text;
         Gee.List<Synapse.Match> matches;
 
         if (search_match != null) {
@@ -360,7 +361,9 @@ public class Slingshot.SlingshotView : Gtk.Bin, UnityClient {
         }
 
         Idle.add (() => {
-            search_view.set_results (matches, text);
+            if (search_entry.text == query_text) {
+                search_view.set_results (matches, text);
+            }
             return false;
         });
     }
diff --git a/src/meson.build b/src/meson.build
index e913d34e..d504c851 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -64,6 +64,7 @@ sources = [
     'synapse-plugins/desktop-file-plugin.vala',
     'synapse-plugins/file-bookmarks-plugin.vala',
     'synapse-plugins/switchboard-plugin.vala',
+    'synapse-plugins/file-search-plugin.vala',
     'synapse-plugins/system-managment.vala',
     'synapse-plugins/link-plugin.vala',
     'synapse-plugins/appcenter-plugin.vala',
diff --git a/src/synapse-plugins/file-search-plugin.vala b/src/synapse-plugins/file-search-plugin.vala
new file mode 100644
index 00000000..8f958653
--- /dev/null
+++ b/src/synapse-plugins/file-search-plugin.vala
@@ -0,0 +1,209 @@
+/*
+ * File Search Plugin for Slingshot
+ *
+ * This plugin allows you to search for files in the home directory and subdirectories.
+ *
+ */
+
+namespace Synapse {
+    public class FileSearchPlugin : Object, Activatable, ItemProvider {
+        private const int MAX_RESULTS = 50;
+        private const int MAX_SEARCH_DEPTH = 3;
+        private const int MIN_QUERY_LENGTH = 2;
+
+        public bool enabled { get; set; default = true; }
+
+        public void activate () { }
+        public void deactivate () { }
+
+        public class Result : Synapse.Match {
+            private File file;
+
+            public Result (File f) {
+                string? path = f.get_path ();
+                string? basename = f.get_basename ();
+                string icon = "text-x-generic";
+
+                try {
+                    var info = f.query_info (FileAttribute.STANDARD_CONTENT_TYPE, FileQueryInfoFlags.NOFOLLOW_SYMLINKS, null);
+                    unowned string? ctype = info.get_content_type ();
+                    if (ctype != null) {
+                        if (ctype.has_prefix ("image/")) {
+                            icon = "image-x-generic";
+                        } else if (ctype.has_prefix ("video/")) {
+                            icon = "video-x-generic";
+                        } else if (ctype.has_prefix ("audio/")) {
+                            icon = "audio-x-generic";
+                        } else if (ctype.has_prefix ("application/pdf")) {
+                            icon = "application-pdf";
+                        }
+                    }
+                } catch (Error e) {
+                    // Content type may not be available for certain files or permissions may be lacking
+                }
+
+                string title_text;
+                if (basename != null && basename != "") {
+                    title_text = basename;
+                } else if (path != null) {
+                    title_text = path;
+                } else {
+                    title_text = f.get_uri ();
+                }
+
+                string desc_text = path != null ? path : f.get_uri ();
+
+                Object (
+                    title: title_text,
+                    description: desc_text,
+                    icon_name: icon,
+                    match_type: MatchType.GENERIC_URI
+                );
+
+                file = f;
+            }
+
+            public override void execute (Synapse.Match? match) {
+                try {
+                    AppInfo.launch_default_for_uri (file.get_uri (), null);
+                } catch (Error e) {
+                    warning ("Failed to open %s: %s", file.get_uri (), e.message);
+                }
+            }
+        }
+
+        public class RevealResult : Synapse.Match {
+            private File file;
+
+            public RevealResult (File f) {
+                string? path = f.get_path ();
+                string? basename = f.get_basename ();
+                string? parent = f.get_parent () != null ? f.get_parent ().get_path () : null;
+
+                string title_text;
+                if (basename != null && basename != "") {
+                    title_text = _("Show in Files: %s").printf (basename);
+                } else {
+                    title_text = _("Show in Files");
+                }
+
+                Object (
+                    title: title_text,
+                    description: parent ?? f.get_uri (),
+                    icon_name: "folder",
+                    match_type: MatchType.GENERIC_URI
+                );
+                file = f;
+            }
+
+            public override void execute (Synapse.Match? match) {
+                try {
+                    var parent = file.get_parent ();
+                    if (parent != null) {
+                        AppInfo.launch_default_for_uri (parent.get_uri (), null);
+                    } else {
+                        AppInfo.launch_default_for_uri (file.get_uri (), null);
+                    }
+                } catch (Error e) {
+                    warning ("Failed to reveal %s: %s", file.get_uri (), e.message);
+                }
+            }
+        }
+
+        static void register_plugin () {
+            DataSink.PluginRegistry.get_default ().register_plugin (
+                typeof (FileSearchPlugin),
+                "system-file-manager",
+                register_plugin,
+                true
+            );
+        }
+
+        static construct {
+            register_plugin ();
+        }
+
+        public async ResultSet? search (Query q) throws SearchError {
+            string query = q.query_string.strip ();
+            if (query.length < MIN_QUERY_LENGTH) {
+                return null;
+            }
+
+            var matchers = Query.get_matchers_for_query (q.query_string_folded, 0);
+            var results = new ResultSet ();
+
+            yield search_files (q, matchers, results);
+
+            return results;
+        }
+
+        private async void search_files (Query q, Gee.List<Gee.Map.Entry<Regex,int>> matchers, ResultSet results) {
+            int added = 0;
+            added = yield walk_dir (q, matchers, results, File.new_for_path (Environment.get_home_dir ()), 0, MAX_SEARCH_DEPTH, added);
+        }
+
+        private async int walk_dir (Query q, Gee.List<Gee.Map.Entry<Regex,int>> matchers, ResultSet results, File dir, int depth, int max_depth, int added) {
+            if (q.is_cancelled () || added >= MAX_RESULTS) {
+                return added;
+            }
+
+            if (depth > max_depth) {
+                return added;
+            }
+
+            try {
+                var enumerator = yield dir.enumerate_children_async ("standard::name,standard::type,standard::is-hidden,standard::is-backup", FileQueryInfoFlags.NOFOLLOW_SYMLINKS);
+                while (true) {
+                    List<FileInfo> infos = yield enumerator.next_files_async (MAX_RESULTS);
+                    if (infos == null || infos.length () == 0) {
+                        break;
+                    }
+
+                    foreach (FileInfo info in infos) {
+                        if (q.is_cancelled () || added >= MAX_RESULTS) {
+                            return added;
+                        }
+
+                        if (info.get_is_hidden () || info.get_is_backup ()) {
+                            continue;
+                        }
+
+                        var child = dir.get_child (info.get_name ());
+                        if (info.get_file_type () == FileType.DIRECTORY) {
+                            added = yield walk_dir (q, matchers, results, child, depth + 1, max_depth, added);
+                        } else if (info.get_file_type () == FileType.REGULAR) {
+                            added = add_if_match (q, matchers, results, child, added);
+                        }
+
+                        if (added >= MAX_RESULTS) {
+                            return added;
+                        }
+                    }
+                }
+            } catch (Error e) {
+                // Silently skip directories we don't have permission to read
+            }
+
+            return added;
+        }
+
+        private int add_if_match (Query q, Gee.List<Gee.Map.Entry<Regex,int>> matchers, ResultSet results, File f, int added) {
+            string? bn = f.get_basename ();
+            string basename = (bn != null) ? bn.down () : "";
+
+            foreach (var matcher in matchers) {
+                MatchInfo mi;
+                if (matcher.key.match (basename, 0, out mi)) {
+                    try {
+                        results.add (new Result (f), Match.Score.AVERAGE);
+                        results.add (new RevealResult (f), Match.Score.BELOW_AVERAGE);
+                    } catch (Error e) {
+                        return added;
+                    }
+                    return added + 1;
+                }
+            }
+            return added;
+        }
+    }
+}
\ No newline at end of file
